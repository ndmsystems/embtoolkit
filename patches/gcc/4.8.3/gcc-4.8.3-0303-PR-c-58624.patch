From 7a720e5de79cc5654a2350a8fed9957a77ab7e07 Mon Sep 17 00:00:00 2001
From: jason <jason@138bc75d-0d04-0410-961f-82ee72b054a4>
Date: Wed, 15 Oct 2014 16:46:11 +0000
Subject: [PATCH 303/326] 	PR c++/58624 	* pt.c (tsubst_copy_and_build)
 [VAR_DECL]: Use TLS wrapper. 	* semantics.c (finish_id_expression): Don't
 call TLS wrapper in a 	template.

git-svn-id: svn+ssh://gcc.gnu.org/svn/gcc/branches/gcc-4_8-branch@216273 138bc75d-0d04-0410-961f-82ee72b054a4
---
 gcc/cp/ChangeLog                          |  7 +++++++
 gcc/cp/pt.c                               | 10 ++++++++++
 gcc/cp/semantics.c                        |  1 +
 gcc/testsuite/g++.dg/tls/thread_local10.C | 23 +++++++++++++++++++++++
 4 files changed, 41 insertions(+)
 create mode 100644 gcc/testsuite/g++.dg/tls/thread_local10.C

diff --git a/gcc/cp/ChangeLog b/gcc/cp/ChangeLog
index 82e61f5..d289bba 100644
--- a/gcc/cp/ChangeLog
+++ b/gcc/cp/ChangeLog
@@ -1,3 +1,10 @@
+2014-10-15  Jason Merrill  <jason@redhat.com>
+
+	PR c++/58624
+	* pt.c (tsubst_copy_and_build) [VAR_DECL]: Use TLS wrapper.
+	* semantics.c (finish_id_expression): Don't call TLS wrapper in a
+	template.
+
 2014-08-07  Jason Merrill  <jason@redhat.com>
 
 	PR c++/61959
diff --git a/gcc/cp/pt.c b/gcc/cp/pt.c
index c03af2e..83aedd7 100644
--- a/gcc/cp/pt.c
+++ b/gcc/cp/pt.c
@@ -14499,6 +14499,16 @@ tsubst_copy_and_build (tree t,
     case PARM_DECL:
       {
 	tree r = tsubst_copy (t, args, complain, in_decl);
+	if (TREE_CODE (r) == VAR_DECL
+	    && !processing_template_decl
+	    && !cp_unevaluated_operand
+	    && DECL_THREAD_LOCAL_P (r))
+	  {
+	    if (tree wrap = get_tls_wrapper_fn (r))
+	      /* Replace an evaluated use of the thread_local variable with
+		 a call to its wrapper.  */
+	      r = build_cxx_call (wrap, 0, NULL, tf_warning_or_error);
+	  }
 
 	if (TREE_CODE (TREE_TYPE (t)) != REFERENCE_TYPE)
 	  /* If the original type was a reference, we'll be wrapped in
diff --git a/gcc/cp/semantics.c b/gcc/cp/semantics.c
index 9825dbe..cc9c550 100644
--- a/gcc/cp/semantics.c
+++ b/gcc/cp/semantics.c
@@ -3343,6 +3343,7 @@ finish_id_expression (tree id_expression,
       tree wrap;
       if (TREE_CODE (decl) == VAR_DECL
 	  && !cp_unevaluated_operand
+	  && !processing_template_decl
 	  && DECL_THREAD_LOCAL_P (decl)
 	  && (wrap = get_tls_wrapper_fn (decl)))
 	{
diff --git a/gcc/testsuite/g++.dg/tls/thread_local10.C b/gcc/testsuite/g++.dg/tls/thread_local10.C
new file mode 100644
index 0000000..48c1b86
--- /dev/null
+++ b/gcc/testsuite/g++.dg/tls/thread_local10.C
@@ -0,0 +1,23 @@
+// PR c++/58624
+
+// { dg-do run { target c++11 } }
+// { dg-add-options tls }
+// { dg-require-effective-target tls_runtime }
+
+int i;
+
+template <typename> struct A
+{
+  static thread_local int s;
+
+  A () { i = s; }
+};
+
+int f() { return 42; }
+template <typename T> thread_local int A<T>::s = f();
+
+int main () {
+  A<void> a;
+  if (i != 42)
+    __builtin_abort();
+}
-- 
2.0.3

