From a7e1c6e50dcc13a1c588a98db51be093a60c18b1 Mon Sep 17 00:00:00 2001
From: jason <jason@138bc75d-0d04-0410-961f-82ee72b054a4>
Date: Fri, 1 Aug 2014 18:33:35 +0000
Subject: [PATCH 152/326] 	PR c++/60361 	* parser.c
 (cp_parser_template_id): Don't set up a CPP_TEMPLATE_ID 	if re-parsing
 might succeed. 	* semantics.c (finish_id_expression): Use of a
 parameter outside 	the function body is a parse error.

git-svn-id: svn+ssh://gcc.gnu.org/svn/gcc/branches/gcc-4_8-branch@213499 138bc75d-0d04-0410-961f-82ee72b054a4
---
 gcc/cp/ChangeLog                                     |  8 ++++++++
 gcc/cp/parser.c                                      |  7 ++++++-
 gcc/cp/semantics.c                                   |  2 +-
 gcc/testsuite/g++.dg/parse/ambig7.C                  | 16 ++++++++++++++++
 gcc/testsuite/g++.dg/parse/parameter-declaration-2.C |  2 +-
 gcc/testsuite/g++.dg/parse/typename7.C               |  6 ++----
 6 files changed, 34 insertions(+), 7 deletions(-)
 create mode 100644 gcc/testsuite/g++.dg/parse/ambig7.C

diff --git a/gcc/cp/ChangeLog b/gcc/cp/ChangeLog
index 4808494..eda7f4e 100644
--- a/gcc/cp/ChangeLog
+++ b/gcc/cp/ChangeLog
@@ -1,3 +1,11 @@
+2014-03-05  Jason Merrill  <jason@redhat.com>
+
+	PR c++/60361
+	* parser.c (cp_parser_template_id): Don't set up a CPP_TEMPLATE_ID
+	if re-parsing might succeed.
+	* semantics.c (finish_id_expression): Use of a parameter outside
+	the function body is a parse error.
+
 2014-06-30  Jason Merrill  <jason@redhat.com>
 
 	PR c++/61647
diff --git a/gcc/cp/parser.c b/gcc/cp/parser.c
index c512d69..affe2df 100644
--- a/gcc/cp/parser.c
+++ b/gcc/cp/parser.c
@@ -12831,7 +12831,12 @@ cp_parser_template_id (cp_parser *parser,
      the effort required to do the parse, nor will we issue duplicate
      error messages about problems during instantiation of the
      template.  */
-  if (start_of_id)
+  if (start_of_id
+      /* Don't do this if we had a parse error in a declarator; re-parsing
+	 might succeed if a name changes meaning (60361).  */
+      && !(cp_parser_error_occurred (parser)
+	   && cp_parser_parsing_tentatively (parser)
+	   && parser->in_declarator_p))
     {
       cp_token *token = cp_lexer_token_at (parser->lexer, start_of_id);
 
diff --git a/gcc/cp/semantics.c b/gcc/cp/semantics.c
index 9518685..d5013c4 100644
--- a/gcc/cp/semantics.c
+++ b/gcc/cp/semantics.c
@@ -3108,7 +3108,7 @@ finish_id_expression (tree id_expression,
 	  && DECL_CONTEXT (decl) == NULL_TREE
 	  && !cp_unevaluated_operand)
 	{
-	  error ("use of parameter %qD outside function body", decl);
+	  *error_msg = "use of parameter outside function body";
 	  return error_mark_node;
 	}
     }
diff --git a/gcc/testsuite/g++.dg/parse/ambig7.C b/gcc/testsuite/g++.dg/parse/ambig7.C
new file mode 100644
index 0000000..9a5b879
--- /dev/null
+++ b/gcc/testsuite/g++.dg/parse/ambig7.C
@@ -0,0 +1,16 @@
+// PR c++/60361
+
+struct Helper
+{
+  Helper(int a, void (*pfunc)());
+};
+
+template <int I> void function();
+
+const int A = 1;
+const int B = 2;
+
+Helper testOk(A, function<A>);
+Helper testOk2(int(A), function<B>);
+Helper testOk3((int(A)), function<A>);
+Helper testFail(int(A), function<A>);
diff --git a/gcc/testsuite/g++.dg/parse/parameter-declaration-2.C b/gcc/testsuite/g++.dg/parse/parameter-declaration-2.C
index 6116630..3c983cc 100644
--- a/gcc/testsuite/g++.dg/parse/parameter-declaration-2.C
+++ b/gcc/testsuite/g++.dg/parse/parameter-declaration-2.C
@@ -1,2 +1,2 @@
-void f (int i, int p[i]); // { dg-error "use of parameter .i. outside function body" }
+void f (int i, int p[i]); // { dg-error "use of parameter.*outside function body" }
 // { dg-prune-output "array bound" }
diff --git a/gcc/testsuite/g++.dg/parse/typename7.C b/gcc/testsuite/g++.dg/parse/typename7.C
index 2d823f8..3cee4ba 100644
--- a/gcc/testsuite/g++.dg/parse/typename7.C
+++ b/gcc/testsuite/g++.dg/parse/typename7.C
@@ -7,10 +7,9 @@
 
 struct A
 {
-  template<typename>   void foo(int); // { dg-message "note" }
-  template<typename T> void bar(T t) { // { dg-message "note" }
+  template<typename>   void foo(int);
+  template<typename T> void bar(T t) {
     this->foo<typename T>(t); } // { dg-error "expected|parse error|no matching" }
-  // { dg-message "candidate" "candidate note" { target *-*-* } 12 }
   template<typename T> void bad(T t) {
     foo<typename T>(t); } // { dg-error "expected|parse error|no matching" }
 };
@@ -20,7 +19,6 @@ struct B
 {
   void bar(T t) {
     A().bar<typename T>(t); } // { dg-error "expected|parse error|no matching" }
-  // { dg-message "candidate" "candidate note" { target *-*-* } 22 }
   void bad(T t) {
     B<typename T>::bar(t); } // { dg-error "invalid|not a template" }
 };
-- 
2.0.3

