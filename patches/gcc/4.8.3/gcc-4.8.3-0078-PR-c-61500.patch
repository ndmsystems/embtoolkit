From c5c56c90f308a797a44728454d24f256a7a7e1ca Mon Sep 17 00:00:00 2001
From: jason <jason@138bc75d-0d04-0410-961f-82ee72b054a4>
Date: Mon, 30 Jun 2014 15:05:32 +0000
Subject: [PATCH 078/134] 	PR c++/61500 	* tree.c (lvalue_kind): Handle
 MEMBER_REF and DOTSTAR_EXPR.

git-svn-id: svn+ssh://gcc.gnu.org/svn/gcc/branches/gcc-4_8-branch@212152 138bc75d-0d04-0410-961f-82ee72b054a4
---
 gcc/cp/ChangeLog                         |  5 +++++
 gcc/cp/tree.c                            | 10 ++++++++++
 gcc/testsuite/g++.dg/template/ptrmem27.C | 22 ++++++++++++++++++++++
 3 files changed, 37 insertions(+)
 create mode 100644 gcc/testsuite/g++.dg/template/ptrmem27.C

diff --git a/gcc/cp/ChangeLog b/gcc/cp/ChangeLog
index c89da13..80c7fd8 100644
--- a/gcc/cp/ChangeLog
+++ b/gcc/cp/ChangeLog
@@ -1,3 +1,8 @@
+2014-06-30  Jason Merrill  <jason@redhat.com>
+
+	PR c++/61500
+	* tree.c (lvalue_kind): Handle MEMBER_REF and DOTSTAR_EXPR.
+
 2014-06-17  Jason Merrill  <jason@redhat.com>
 
 	PR c++/60605
diff --git a/gcc/cp/tree.c b/gcc/cp/tree.c
index c7502d6..ed4bff6 100644
--- a/gcc/cp/tree.c
+++ b/gcc/cp/tree.c
@@ -97,6 +97,16 @@ lvalue_kind (const_tree ref)
     case IMAGPART_EXPR:
       return lvalue_kind (TREE_OPERAND (ref, 0));
 
+    case MEMBER_REF:
+    case DOTSTAR_EXPR:
+      if (TREE_CODE (ref) == MEMBER_REF)
+	op1_lvalue_kind = clk_ordinary;
+      else
+	op1_lvalue_kind = lvalue_kind (TREE_OPERAND (ref, 0));
+      if (TYPE_PTRMEMFUNC_P (TREE_TYPE (TREE_OPERAND (ref, 1))))
+	op1_lvalue_kind = clk_none;
+      return op1_lvalue_kind;
+
     case COMPONENT_REF:
       op1_lvalue_kind = lvalue_kind (TREE_OPERAND (ref, 0));
       /* Look at the member designator.  */
diff --git a/gcc/testsuite/g++.dg/template/ptrmem27.C b/gcc/testsuite/g++.dg/template/ptrmem27.C
new file mode 100644
index 0000000..8c63f9c
--- /dev/null
+++ b/gcc/testsuite/g++.dg/template/ptrmem27.C
@@ -0,0 +1,22 @@
+// PR c++/61500
+
+struct X {
+  int i;
+  int j;
+
+  int foo(int X::* ptr);
+
+  template <int X::* ptr>
+  int bar();
+};
+
+int X::foo(int X::* ptr) {
+  int* p = &(this->*ptr);  // OK.
+  return *p;
+}
+
+template <int X::* ptr>
+int X::bar() {
+  int* p = &(this->*ptr);  // gcc 4.9.0: OK in C++98 mode, fails in C++11 mode.
+  return *p;
+}
-- 
1.8.5.5

